#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 100
#define MAX_LEN 100

// Define a structure for a task
typedef struct {
    char name[MAX_LEN];
} Task;

// Array of tasks
Task tasks[MAX_TASKS];
int taskCount = 0;

// Function to add a task

void Add_Task(const char *taskName) {
    if (taskCount >= MAX_TASKS) {
        printf("Task list is full!\n");
        return;
    }
    strncpy(tasks[taskCount].name, taskName, MAX_LEN - 1);
    tasks[taskCount].name[MAX_LEN - 1] = '\0'; 
    taskCount++;
    printf("Task added: %s\n", taskName);
}

// Function to list all tasks

void List_all_Tasks(){
    if (taskCount == 0) {
        printf("No tasks found.\n");
        return;
    }

    printf("Tasks:\n");
    for (int i = 0; i < taskCount; i++) {
        printf("%d. %s\n", i + 1, tasks[i].name);
    }
}

// Function to Delete a task

void Delete_Task(int index) {
    if (index < 1 || index > taskCount) {
        printf("Invalid task number!\n");
        return;
    }
    printf("Deleted task: %s\n", tasks[index - 1].name);
    
    // Shift tasks left
    for (int i = index - 1; i < taskCount - 1; i++) {
        tasks[i] = tasks[i + 1];
    }
    taskCount--;
}

// Main C0de

int main(void) {
    printf(
        "/__   \\__ _ ___| | __    /\\/\\   __ _ _ __   __ _  __ _  ___ _ __ \n"
        "  / /\\/ _` / __| |/ /   /    \\ / _` | '_ \\ / _` |/ _` |/ _ \\ '__|\n"
        " / / | (_| \\__ \\   <   / /\\/\\ \\ (_| | | | | (_| | (_| |  __/ |   \n"
        " \\/   \\__,_|___/_|\\_\\  \\/    \\/\\__,_|_| |_|\\__,_|\\__, |\\___|_|   \n"
        "                                                 |___/            \n"
    );

    int choice;
    int exitFlag = 0;
    char name[MAX_LEN];

    while (exitFlag == 0) {
        printf("\n1. Add Task\n");
        printf("2. Delete Task\n");
        printf("3. List Tasks\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter Task Name: ");
                scanf("%s", name);
                Add_Task(name);
                break;
            case 2: {
                List_all_Tasks();
                int delIndex;
                printf("Enter task number to delete: ");
                scanf("%d", &delIndex);
                Delete_Task(delIndex);
                break;
            }
            case 3:
                List_all_Tasks();
                break;
            case 4:
                exitFlag = 1;
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
